import torch as tc
import torch.nn as nn

def track_var(var: tc.Tensor, track: bool):
    if track: return var if var.requires_grad else var.detach().requires_grad_(True)
    else: return var.detach() if var.requires_grad else var

with tc.enable_grad():
    # leaf
    x = tc.randn(4,3, requires_grad=False)
    print("is_leaf: ", x.is_leaf)
    print(x.requires_grad)
    f = nn.Linear(3,2)
    x.requires_grad_(True)
    print(x.requires_grad)
    z = f(x)
    try: print(tc.autograd.grad(z.sum(), x)[0])
    except RuntimeError as e: print(str(e))
    print()

    x = tc.randn(4,3, requires_grad=True)
    print("is_leaf: ", x.is_leaf)
    print(x.requires_grad)
    f = nn.Linear(3,2)
    x.requires_grad_(False)
    print(x.requires_grad)
    z = f(x)
    try: print(tc.autograd.grad(z.sum(), x)[0])
    except RuntimeError as e: print(str(e))
    print()

    x = tc.randn(4,3, requires_grad=True)
    print("is_leaf: ", x.is_leaf)
    print(x.requires_grad)
    f = nn.Linear(3,2)
    ff = nn.Linear(3,2)
    zz = ff(x)
    x.requires_grad_(False)
    print(x.requires_grad)
    z = f(x)
    try: print(tc.autograd.grad(zz.sum(), x)[0])
    except RuntimeError as e: print(str(e))
    try: print(tc.autograd.grad(z.sum(), x)[0])
    except RuntimeError as e: print(str(e))
    print()

    x = tc.randn(4,3, requires_grad=True)
    print("is_leaf: ", x.is_leaf)
    print(x.requires_grad)
    f = nn.Linear(3,2)
    x = x.detach()
    print(x.requires_grad)
    z = f(x)
    try: print(tc.autograd.grad(z.sum(), x)[0])
    except RuntimeError as e: print(str(e))
    print()

    x = tc.randn(4,3, requires_grad=True)
    print("is_leaf: ", x.is_leaf)
    print(x.requires_grad)
    f = nn.Linear(3,2)
    ff = nn.Linear(3,2)
    zz = ff(x)
    xx = x.detach()
    print(xx.requires_grad)
    z = f(xx)
    try: print(tc.autograd.grad(zz.sum(), x)[0])
    except RuntimeError as e: print(str(e))
    try: print(tc.autograd.grad(z.sum(), xx)[0])
    except RuntimeError as e: print(str(e))

    print("-----------------------")

    # not leaf
    x = tc.randn(4,3)
    f = tc.ones(3,2)
    z = x @ f
    print("is_leaf: ", z.is_leaf)
    print(z.requires_grad)
    z.requires_grad_(True)
    print(z.requires_grad)
    g = nn.Linear(2,2)
    y = g(z)
    try: print(tc.autograd.grad(y.sum(), z)[0])
    except RuntimeError as e: print(str(e))
    print()

    x = tc.randn(4,3)
    f = tc.ones(3,2, requires_grad=True)
    z = x @ f
    print("is_leaf: ", z.is_leaf)
    print(z.requires_grad)
    z.requires_grad_(True)
    print(z.requires_grad)
    g = nn.Linear(2,2)
    y = g(z)
    try: print(tc.autograd.grad(y.sum(), z)[0])
    except RuntimeError as e: print(str(e))
    print()

    x = tc.randn(4,3)
    f = nn.Linear(3,2)
    z = f(x)
    print("is_leaf: ", z.is_leaf)
    print(z.requires_grad)
    z.requires_grad_(True)
    print(z.requires_grad)
    g = nn.Linear(2,2)
    y = g(z)
    try: print(tc.autograd.grad(y.sum(), z)[0])
    except RuntimeError as e: print(str(e))
    print()

    # x = tc.randn(4,3, requires_grad=True)
    # f = nn.Linear(3,2)
    # z = f(x)
    # print("is_leaf: ", z.is_leaf)
    # print(z.requires_grad)
    # z.requires_grad_(False)
    # print(z.requires_grad)
    # g = nn.Linear(2,2)
    # y = g(z)
    # try: print(tc.autograd.grad(y.sum(), z)[0])
    # except RuntimeError as e: print(str(e))
    # print()

    x = tc.randn(4,3, requires_grad=True)
    f = nn.Linear(3,2)
    z = f(x)
    print("is_leaf: ", z.is_leaf)
    print(z.requires_grad)
    z = z.detach()
    print(z.requires_grad)
    g = nn.Linear(2,2)
    y = g(z)
    try: print(tc.autograd.grad(y.sum(), z)[0])
    except RuntimeError as e: print(str(e))
    print()

print("=================")
with tc.enable_grad():
    # leaf
    x = tc.randn(4,3, requires_grad=False)
    print("is_leaf: ", x.is_leaf)
    print(x.requires_grad)
    f = nn.Linear(3,2)
    x = track_var(x, True)
    print(x.requires_grad)
    z = f(x)
    try: print(tc.autograd.grad(z.sum(), x)[0])
    except RuntimeError as e: print(str(e))
    print()

    x = tc.randn(4,3, requires_grad=True)
    print("is_leaf: ", x.is_leaf)
    print(x.requires_grad)
    f = nn.Linear(3,2)
    x = track_var(x, False)
    print(x.requires_grad)
    z = f(x)
    try: print(tc.autograd.grad(z.sum(), x)[0])
    except RuntimeError as e: print(str(e))
    print()

    x = tc.randn(4,3, requires_grad=True)
    print("is_leaf: ", x.is_leaf)
    print(x.requires_grad)
    f = nn.Linear(3,2)
    ff = nn.Linear(3,2)
    zz = ff(x)
    xx = track_var(x, False)
    print(xx.requires_grad)
    z = f(xx)
    try: print(tc.autograd.grad(zz.sum(), x)[0])
    except RuntimeError as e: print(str(e))
    try: print(tc.autograd.grad(z.sum(), xx)[0])
    except RuntimeError as e: print(str(e))

    print("-----------------------")

    # not leaf
    x = tc.randn(4,3)
    f = tc.ones(3,2)
    z = x @ f
    print("is_leaf: ", z.is_leaf)
    print(z.requires_grad)
    z = track_var(z, True)
    print(z.requires_grad)
    g = nn.Linear(2,2)
    y = g(z)
    try: print(tc.autograd.grad(y.sum(), z)[0])
    except RuntimeError as e: print(str(e))
    print()

    x = tc.randn(4,3)
    f = tc.ones(3,2, requires_grad=True)
    z = x @ f
    print("is_leaf: ", z.is_leaf)
    print(z.requires_grad)
    z = track_var(z, True)
    print(z.requires_grad)
    g = nn.Linear(2,2)
    y = g(z)
    try: print(tc.autograd.grad(y.sum(), z)[0])
    except RuntimeError as e: print(str(e))
    print()

    x = tc.randn(4,3)
    f = nn.Linear(3,2)
    z = f(x)
    print("is_leaf: ", z.is_leaf)
    print(z.requires_grad)
    z = track_var(z, True)
    print(z.requires_grad)
    g = nn.Linear(2,2)
    y = g(z)
    try: print(tc.autograd.grad(y.sum(), z)[0])
    except RuntimeError as e: print(str(e))
    print()

    x = tc.randn(4,3, requires_grad=True)
    f = nn.Linear(3,2)
    z = f(x)
    print("is_leaf: ", z.is_leaf)
    print(z.requires_grad)
    z = track_var(z, False)
    print(z.requires_grad)
    g = nn.Linear(2,2)
    y = g(z)
    try: print(tc.autograd.grad(y.sum(), z)[0])
    except RuntimeError as e: print(str(e))
    print()

